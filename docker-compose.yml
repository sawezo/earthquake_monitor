version: '3.7'

x-services-volume:
    &services-volume
    type: bind
    source: ./backend/models
    target: /models

services: 

    # zookeeper:
    #     container_name: "zookeeper"
    #     image: wurstmeister/zookeeper:3.4.6
    #     ports:
    #         - 2181:2181
    
    # kafka:
    #     container_name: "kafka"
    #     image: wurstmeister/kafka:2.12-2.2.1
    #     ports:
    #         - "9092:9092"
    #     expose:
    #         - "9093"
    #     environment:
    #         KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
    #         KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    #         KAFKA_LISTENERS: INSIDE://${KAFKA_BROKER_URI}
    #         KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    #     volumes:
    #         - /var/run/docker.sock:/var/run/docker.sock                      
    #     depends_on:
    #         - zookeeper

    # mongo_db:
    #     container_name: "mongo_db"
    #     image: mongo:latest
    #     ports:
    #         - "29017:27017"
    #     command: --auth
    #     environment:
    #         - MONGO_ADMIN_USER=${MONGO_ADMIN_USER}
    #         - MONGO_ADMIN_PASSWORD=${MONGO_ADMIN_PASSWORD}
    #         - MONGO_USER=${MONGO_USER}
    #         - MONGO_PASSWORD=${MONGO_PASSWORD}
    #     volumes:
    #         - ./backend/mongo/setup:/setup
    #         - ./backend/mongo/db:/data/db

    # jobmanager:
    #     container_name: "flink_job_manager"
    #     build: ./backend/flink/
    #     image: pyflink/playgrounds:1.13.0-rc2
    #     hostname: "jobmanager"
    #     volumes:
    #         - ./backend/flink/src:/opt/jobs
    #     expose:
    #         - "6123"
    #     ports:
    #         - "8081:8081"
    #     command: jobmanager
    #     environment:
    #         - JOB_MANAGER_RPC_ADDRESS=jobmanager
    #         - POSTGRES_USER=${POSTGRES_USER}
    #         - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #         - POSTGRES_DB=${POSTGRES_DB}
    #         - KAFKA_BROKER_URI=${KAFKA_BROKER_URI}
    #         - TOPIC=${TOPIC}
    #         - GROUP=${GROUP}
              
    # taskmanager:
    #     container_name: "flink_task_manager"
    #     image: pyflink/playgrounds:1.13.0-rc2
    #     volumes:
    #         - ./backend/flink/src:/opt/jobs
    #     expose:
    #         - "6121"
    #         - "6122"
    #     depends_on:
    #         - jobmanager
    #     command: taskmanager
    #     links:
    #         - jobmanager:jobmanager
    #     environment:
    #         - JOB_MANAGER_RPC_ADDRESS=jobmanager
    #         - TASK_MANAGER_NUMBER_OF_TASK_SLOTS=20

    postgres_db:
        container_name: "postgres_db"
        image: postgres:alpine
        restart: always
        ports:
            - "5432:5432"
        expose:
            - "5432"
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        volumes:
            - ./backend/postgres/db:/var/lib/postgresql/data
            - ./backend/postgres/setup/bootstrap.sql:/docker-entrypoint-initdb.d/bootstrap.sql

    # backend:
    #     container_name: "backend"
    #     build: ./backend/src
    #     volumes:
    #         - ./backend/src:/src
    #     depends_on: 
    #         - kafka
    #         - taskmanager
    #         - mongo_db
    #         - postgres_db
    #     environment:
            # - KAFKA_BROKER_URI=${KAFKA_BROKER_URI}
            # - TOPIC=${TOPIC}
            # - GROUP=${GROUP}
            # - MONGO_USER=${MONGO_USER}
            # - MONGO_PASSWORD=${MONGO_PASSWORD}

    flask-app:
        container_name: "flask-app"
        build: ./frontend/flask
        restart: always
        volumes:
            - ./frontend/flask:/src
        depends_on: 
            - postgres_db
        ports: 
            - '8000:8000'
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        healthcheck:
            test: ["CMD-SHELL", "curl --silent --fail localhost:8000/flask-health-check || exit 1"]
            interval: 10s
            timeout: 10s
            retries: 10
        command: gunicorn -w 3 -t 60 -b 0.0.0.0:8000 app:app
            
    nginx-proxy:
        container_name: "nginx"
        build: ./frontend/nginx
        restart: always
        volumes:
            - ./frontend/nginx/default.conf:/tmp/default.conf
        environment: 
            - FLASK_SERVER_ADDR=flask-app:8000
        ports:
            - "80:80"
        depends_on:
            - postgres_db
            - flask-app
        healthcheck:
            test: ["CMD-SHELL", "curl --silent --fail localhost:80/health-check || exit 1"]
            interval: 10s
            timeout: 10s
            retries: 3
        command: /app/start.sh
            
    # scheduler:
    #     container_name: "scheduler"
    #     image: apache/airflow
    #     command: scheduler
    #     depends_on:
    #         - postgres_db
    #     environment:
    #         - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db/${POSTGRES_DB}
    #         - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    #     volumes:
    #         - ./backend/airflow/dags:/opt/airflow/dags
    #         - ./backend/airflow/logs:/opt/airflow/logs
    #         - *services-volume
    
    # webserver:
    #     container_name: "webserver"
    #     image: apache/airflow
    #     entrypoint: /opt/airflow/src/webserver_entrypoint.sh
    #     depends_on:
    #         - postgres_db
    #         - scheduler
    #     environment:
    #         - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db/${POSTGRES_DB}
    #         - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    #     volumes:
    #         - ./backend/airflow/dags:/opt/airflow/dags
    #         - ./backend/airflow/logs:/opt/airflow/logs
    #         - ./backend/airflow/src:/opt/airflow/src
    #     ports:
    #         - "8082:8080"


    # dev:
    #     container_name: "dev"
    #     image: jupyter/datascience-notebook
    #     volumes:
    #         - ./notebooks:/home/jovyan/work
    #     ports:
    #         - 8080:8888
    #     env_file:
    #         - .env
    #     depends_on:
    #         - postgres_db
    #         - mongo_db